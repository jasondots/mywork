
git快速手册

相关单词：

repository：仓库

origin：起源 原点

staged：分段的

commit：把…托付给

stash：隐（贮）藏物

branch：分支

Initialize：初始化


-------------------------------------------------------------------

退出 vim编辑器：    :q 回车

-------------------------------------------------------------------
安装 （略）

-------------------------------------------------------------------
创建git目录

//首先，在硬盘上创建一个目录，进入目录 右键→git Bach Here，弹出命令行窗口

以下，是在命令行窗口内操作：


$ mkdir mywork   // mywork为目录名（任意名称 英文）

$ cd runoob     //进入目录

$ git init    // 初始化git，git会在当前目录，创建一个隐藏目录" .git",这个目录记录这所以git相关信息，不能删除！

//屏幕显示内容： Initialized empty Git repository in E:/git_work/mywork/.git/


----------------------------------------------------------------------
克隆仓库 clone

git可以自己在本地的电脑上进行版本管理，不依靠服务器

git的重要功能就是协同开发，共同进行项目的版本控制，就需要安装git服务器

github是互联网上一个著名的git服务器，可以将自己的代码，放在github上进行托管

在github上注册用户，就可以开辟出属于自己的一个git仓库，进行版本控制



$ git clone git://github.com/jQuery/jquery.git       //git://github.com/jQuery/jquery.git 为github上的仓库

----------------------------------------------------------------------------
远程仓库相关命令 remote 

查看远程仓库：$ git remote -v

添加远程仓库：$ git remote add [name] [url]

删除远程仓库：$ git remote rm [name]

修改远程仓库：$ git remote set-url --push [name] [newUrl]


----------------------------------------------------------------------
查看本地文件变化  status

$ git status //查看当前状态，可以显示有哪些文件、目录有过改动


----------------------------------------------------------------------
添加到缓冲区 add

git在正式进行版本更新前，提供一个缓冲区，可以将变更的文件，先保存在缓冲区

在没有正式提交之前，缓冲区的文件可以多次变更，或者清除缓冲区内容（放弃更新）


$ git add 文件名.后缀名      //可以add单独文件，也可以" . "或者 "\*" ,将所有文件的变更全部添加到缓冲区


---------------------------------------------------------------------

提交变更 commit

Git 为你的每一个提交都记录你的名字与电子邮箱地址，所以第一步需要配置用户名和邮箱地址。

$ git config --global user.name 'zhangsan'

$ git config --global user.email zhangsan@abc.com


$ git commit -m "注释语句"    //注释语句是必须填写的 

$ git commit -m -v  //直接提交 忽略注释

-------------------------------------------------------------------
推送到远程仓库 push

$ git push origin master     //origin：本地当前线程   master:远程仓库的线程  master为默认的主线程


$ git push origin :heads/[name]   删除远程分支


$ git push origin :[name]   删除远程分支（同上） 


会提示输入用户名、密码


*如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：
$git push origin test:master         // 提交本地test分支作为远程的master分支
$git push origin test:test              // 提交本地test分支作为远程的test分支

------------------------------------------------------------------
拉取远端仓库 pull

$ git pull [remoteName] [localBranchName]


------------------------------------------------------------------
分支 branch


查看:
$ git branch               查看本地所有分支

$ git branch -a            查看所有的分支

$ git branch -r            查看远程分支


创建:
$ git branch [name]        创建本地分支，注意新分支创建后不会自动切换为当前分支


切换：

$ git checkout [name]      切换分支
 
$ git checkout -b [name]   创建新分支并立即切换到新分支


删除：

$ git branch -d [name]     删除分支：-d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项


合并：

$ git merge [name]         合并分支：将名称为[name]的下级分支与当前分支合并，注意：在 上级分支 上合并 下级分支



创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)

$git symbolic-ref HEAD refs/heads/[name]
$rm .git/index
$git clean -fdx

-----------------------------------------------------------------------------
查看日志

$ git log       显示commit记录（含注释，建议提交时写明注释，以便后期查看记录）    每次显示一屏信息，按回车显示下一屏  :q 直接退出


$ git log -p -2   -p 展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新



-------------------------------------------------------------------------------------
回滚

没有push：

git reset [--soft | --mixed | --hard   

--mixed：（默认）会保留源码,只是将git commit和index 信息回退到了某个版本.

--soft：保留源码,只回退到commit 信息到某个版本.不涉及index的回退,如果还需要提交,直接commit即可.

--hard：源码也会回退到某个版本,commit和index 都回回退到某个版本.(注意,这种方式是改变本地代码仓库源码)



已经push：


git revert c011eb3c20ba6fb38cc94fe5a8dda366a3990c61   需要先找到你想回滚版本唯一的commit标识代码,可以用 git log 查看历史提交记录

通常,前几位即可

git revert c011eb3



git revert用于反转提交,执行evert命令时要求工作树必须是干净的.

git revert用一个新提交来消除一个历史提交所做的任何修改.

revert 之后你的本地代码会回滚到指定的历史版本,这时你再 git push 既可以把线上的代码更新.(这里不会像reset造成冲突的问题)


-------------------------------------------------------------------------------------
忽略一些文件、文件夹不提交

在仓库根目录下创建名称为“.gitignore”的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如：
target
bin
*.db

