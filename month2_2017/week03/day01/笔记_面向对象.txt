Javascript是一种基于对象（object-based）的语言，你遇到的所有东西几乎都是对象。

但是，它又不是一种真正的面向对象编程OOP（Object Oriented Programming）语言，因为它的语法中没有class（类）。

那么，如果我们要把"属性"（property）和"方法"（method），封装成一个对象，甚至要从原型对象生成一个实例对象，我们应该怎么做呢？

----------------------------------------------------------------------------------------------------------
一、 直接生成实例对象
    
    new Object方法：

    var cat1=new Object（); //创建一个空对象

    cat1.name = "大毛"; // 属性赋值

　　cat1.color = "黄色";

    
    字面量方法：

　　var cat2 = {"name":"二毛","color: "黑色"}; 
　　　

这样的写法有两个缺点：

1、是如果多生成几个实例，每一个都要重复这个操作；

2、实例与原型之间，看不出有任何联系。 

-------------------------------------------------------------------------------------------------------------

二、 原始模式的改进（工厂模式）

我们可以写一个函数，解决代码重复的问题。

　　function Cat(name,color) {
　　　　return {
　　　　　　name:name,
　　　　　　color:color
　　　　}
　　}

然后生成实例对象，就等于是在调用函数：

　　var cat1 = Cat("大毛","黄色");
　　var cat2 = Cat("二毛","黑色");

这种方法的问题依然是，cat1和cat2之间没有内在的联系，不能反映出它们是同一个原型对象的实例。

-------------------------------------------------------------------------------------------------

三、 构造函数模式

为了解决从原型对象生成实例的问题，Javascript提供了一个构造函数（Constructor）模式。

所谓"构造函数"，其实就是一个普通函数，但是内部使用了this变量。

使用new运算符，就能生成该构造函数的实例，this指向用该构造函数创建的对象实例。

比如，猫的原型对象现在可以这样写:

　　function Cat(name,color){

　　　　this.name=name;

　　　　this.color=color;
　　}

我们现在就可以生成实例对象了。

　　var cat1 = new Cat("大毛","黄色");

　　var cat2 = new Cat("二毛","黑色");

　　alert(cat1.name); // 大毛

　　alert(cat1.color); // 黄色

这时cat1和cat2会自动含有一个constructor属性，指向它们的构造函数。

　　alert(cat1.constructor == Cat); //true

　　alert(cat2.constructor == Cat); //true

Javascript还提供了一个instanceof运算符，验证原型对象与实例对象之间的关系。

　　alert(cat1 instanceof Cat); //true

　　alert(cat2 instanceof Cat); //true


Javascript不认为基本类型数据是对象

	var a="hxsd";

	var b=123;

	var c=true;

	var d=null;
	
	var e=undefined;


	alert(a instanceof String);//false

	alert(b instanceof Number);//false

	alert(c instanceof Boolean);//false

	alert(d instanceof Object);//false



------------------------------------------------------------------------------

四、构造函数模式的问题

构造函数方法很好用，但是存在一个浪费内存的问题。

请看，我们现在为Cat对象添加一个不变的属性type（种类），再添加一个方法eat（吃）。那么，原型对象Cat就变成了下面这样：

　　function Cat(name,color){

　　　　this.name = name;

　　　　this.color = color;

　　　　this.type = "猫科动物";

　　　　this.eat = function(){ alert("吃老鼠") };
　　}

还是采用同样的方法，生成实例：

　　var cat1 = new Cat("大毛","黄色");
　　var cat2 = new Cat ("二毛","黑色");
　　alert(cat1.type); // 猫科动物
　　cat1.eat(); // 吃老鼠

表面上好像没什么问题，但是实际上这样做，有一个很大的弊端。那就是对于每一个实例对象，type属性和eat()方法都是一模一样的内容，每一次生成一个实例，都必须为重复的内容，多占用一些内存。这样既不环保，也缺乏效率。

　　alert(cat1.eat == cat2.eat); //false

能不能让type属性和eat()方法在内存中只生成一次，然后所有实例都指向那个内存地址呢？回答是可以的。


注意：

原本的构造函数是window对象的方法，如果不用new操作符而直接调用，那么构造函数的执行对象就是 window，即this指向了window。

现在用new操作符后，this就指向了新生成的对象（理解这一步至关重要）。

------------------------------------------------------------------------------------------------------------

五、 Prototype模式

Javascript规定，每一个构造函数都有一个prototype属性，指向另一个对象

这个对象的所有属性和方法，都会被构造函数的实例继承。

这意味着，我们可以把那些不变的属性和方法，直接定义在prototype对象上。

　　function Cat(name,color){
　　　　this.name = name;

　　　　this.color = color;
　　}
　　Cat.prototype.type = "猫科动物";

　　Cat.prototype.eat = function(){ alert("吃老鼠") };

然后，生成实例。

　　var cat1 = new Cat("大毛","黄色");
　　var cat2 = new Cat("二毛","黑色");
　　alert(cat1.type); // 猫科动物
　　cat1.eat(); // 吃老鼠

这时所有实例的type属性和eat()方法，其实都是同一个内存地址，指向prototype对象，因此就提高了运行效率。

　　alert(cat1.eat == cat2.eat); //true

-------------------------------------------------------------------------------------------

对象之间的"继承"方法


比如，现在有一个"动物"对象的构造函数。

　　function Animal(){    
        this.name= "动物";    
        this.showName = function(otherName,age,color){ 
		if(otherName){
			alert('名称:'+otherName+'年龄:'+age+'毛色:'+color);
		}else{
			alert(this.name);
		}
        };    
    };  

还有一个"猫"对象的构造函数。

　　function Cat(){
    	this.name ='猫'; 
    };

怎样才能使"猫"继承"动物"呢？



使用call或apply方法，进行构造函数绑定

call和apply是为了动态改变this而出现的

当一个object没有某个方法，但是其他对象有，我们可以借助call或apply用其它对象的方法来操作（继承）。


fnA.call(fnB,参数1,参数2,参数3，……)   //fnB：传入给当前对象的对象

fnA.apply( fnB,[数组] ) 


两者的相同点：第一个参数相同（对象）

两者的不同点：apply第二个参数是数组


将父对象的构造函数绑定在子对象上，即在子对象构造函数中加一行：

　　
    function Cat(){
　　　　this.name = "猫"
　	Animal.call(this);
　　};
　　var cat=new Cat();
    cat.showName('大黄','2','黄色'); 	


----------------------------------------------------------------
call apply 快速理解

例：

<script>


	function run(txt){
		console.log(this);	//全局下声明的函数，默认this指向window

		this.innerHTML=txt;	//window没有innerHTML属性，所以会报错，那怎么办呢？？？！！！

	};

	//在运行run函数的时候调用call（或者apply）方法，将this转向

	var oDiv=document.getElementById('box');
	
	run.call(oDiv,"hxsd");  //运行结果，oDiv的innerHTML赋值为"hxsd"



</script>
























