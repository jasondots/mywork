运算符

运算符	描述	例子	    结果
+	加	x=y+2	    x=7  +运算符用于把文本值或字符串变量连接起来。
-	减	x=y-2	    x=3
*	乘	x=y*2	    x=10
/	除	x=y/2	    x=2.5
%	求余数  x=y%2	    x=1
++	累加	x++         x=x+1
--	递减	x=--y	    x=4


赋值运算符
运算符	例子	等价于	结果
=	x=y	 	x=5
+=	x+=y	x=x+y	x=15
-=	x-=y	x=x-y	x=5
*=	x*=y	x=x*y	x=50
/=	x/=y	x=x/y	x=2
%=	x%=y	x=x%y	x=0


----------------------------------------------------------
逻辑运算符

&& ||
如果&&的第一个运算数是false，就不再考虑第二个运算数，直接返回false；如果||的第一个运算数是true，也不再考虑第二个运算数，直接返回true。

0、""、null、false、undefined、NaN都会判为false，其他都为true


---------------------------------------------------------
% 模运算（取余）

取模运算是实际就是求余
0%5 = 0
1%5 = 1
2%5 = 2
3%5 = 3
4%5 = 4
5%5 = 0
6%5 = 1
7%5 = 2
8%5 = 3
9%5 = 4
10%5 = 0
11%5 = 1
12%5 = 2
13%5 = 3
14%5 = 4
15%5 = 0
16%5 = 1


---------------------------------------------------------

setAttribute
设定属性

getAttribute
获取属性


用setAttribute设定的属性（attribute），用getAttribute 获取

用.语法设定的属性(property)，用.语法读取


---------------------------------------------------------
typeof  判断数据类型

几个特殊的值：

null  空对象

NaN  不是一个数字

undefined   未定义

是一个运算符，它对操作数返回的结果是一个字符串，有6种(只针对ES，不包含HOST环境对象)

'undefined'
'boolean'
'string'
'number'
'object'
'function'

因为它本身是运算符，它不是函数，使用时没必要加个小括号


typeof用来判断类型，它有几个坑

1. 对null返回是'object'，你却不能真正当对象使用


2. 对NaN返回是'number'，你却不能使用它进行算术运算

var obj = {}
var num = parseInt(obj.a)
if (typeof num === 'number') {
    num = num + 10 // 执行后num仍然是NaN
}
 

3. 不能区分对象、数组、正则，对它们操作都返回'object'

var obj = {}
var arr = []
var reg = /pop/g
console.log(typeof obj) // 'object'
console.log(typeof arr) // 'object'
console.log(typeof reg) // 'object'

---------------------------------------------------------------------------
数据运算与隐性转换

+号操作是连接（不会隐性转换）

“字符串”+“字符串”= String
“字符串”+124=连接


- * /操作，会尝试将不同类型转换成数字进行计算，如果转换不成功，计算结果是NaN 

var a='2'; //字符串
var b=11; //数字
var c=b*a; 结果：22  //隐性转换成功

"字符串" - 123= NaN
"字符串" * 123= NaN
"字符串" / 123= NaN
 
typeof NaN  是number类型